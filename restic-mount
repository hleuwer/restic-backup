#!/bin/bash

logfile=/var/log/restic-backup.log
errfile=/var/log/restic-backup.err

mountdir=/var/mnt/restic


# Checks execution context: need to be root
checkroot()
{
    if [ `whoami` != "root" ]; then
	echo "$0 must be run as root" 1>&2
	exit 1
    fi
}

# Define path to restic executable
if [ `uname` == "Darwin" ]; then
	prog=/opt/local/bin/restic
else
	prog=/usr/bin/restic
fi

# Control variables - defaults
verbose="no"
quiet="yes"
dryrun="no"
allowother="--allow-other"

# Command line options - see below in function help for details.
while getopts vpd flag
do
    case "${flag}" in
	v) verbose="yes";;
	p) quiet="no";;
	d) dryrun="yes";;
    esac
done
# adjust argument index to point to non-option arguments:
# $1 and $2 will point to them
shift $((OPTIND - 1))

name=$1

# Check for verbose output: default no
if [ "$verbose" == "yes" ]; then
    verbose="--verbose=3"
else
    verbose=
fi

# Check for quiet execution of restic: default yes
if [ "$quiet" != "no" ]; then
    quiet=--quiet
    verbose=
else
    quiet=
fi

# Check for dry-run
if [ "$dryrun" == "yes" ]; then
    dryrun=--dry-run
else
    dryrun=
fi

# Backup only for this hostname=`hostname`

# restic password
export RESTIC_PASSWORD_FILE=~/.resticpw

# Help function
help()
{
    echo "Mount repository on $mountdir/LOCATION."
    echo
    echo "usage: restic-mount OPTIONS LOCATION"
    echo "OPTIONS:"
    echo "  -p	Show progress."
    echo "  -v	Be verbose."
    echo "  -d	Dry-run."
    echo
    echo "LOCATION:"
    echo "  lan       Mount repo on local SFTP server."
    echo "  onedrive  Mount repo on ONEDRIVE server."
    echo "  local     Mount local repo."
    echo "  help      Print htis help."
}

# Log function
log()
{
    echo `date`": $1" >> $logfile
}

# Calculate repository
case "$1" in
    "lan")
	export RESTIC_REPOSITORY="sftp:"`whoami`"@raspberrypi2:/var/Backup/hebbie"
	;;
    "onedrive")
	export RESTIC_REPOSITORY="rclone:onedrive:backup/hebbie"
	;;
    "local")
	export RESTIC_REPOSITORY="/Volumes/BackupDisk/hebbie"
	;;
    "help")
	help
	exit 0
	;;
    *)
	help
	exit 1
	;;
esac

checkroot

# We require the tag as second parameter
if [ "$2" != "" ]; then
    help
    exit 1
fi

# Do the job
domount()
{
    mkdir -p $mountdir/$name
    $prog unlock
    $prog mount $quiet $verbose $allowother $mountdir/$name
}



log "$0: mount (restic) of $RESTIC_REPOSITORY started."

# Backup
log "   Mounting $RESTIC_REPOSITORY to $mountdir/$name ..."

# This tricky thing captures stderr of dobackup in $err and maintains exit code in $? for evaluation
{ err="$( { domount; } 2>&1 1>&3 3>&- )"; } 3>&1

if [ $? -ne 0 ]; then
    echo $err 1>&2
    log "   $err" 
    log "$0: mount (restic) of $RESTIC_REPOSITORY failed."
    exit 1
fi

log "$0: mount (restic) of $RESTIC_REPOSITORY finished."
exit 0
