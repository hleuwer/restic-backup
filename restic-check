#!/bin/bash

logfile=/var/log/restic-backup.log
errfile=/var/log/restic-backup.err

# Check for root user
checkroot()
{
    # Check for root user
    if [ `whoami` != "root" ]; then
	echo "$0 must be run as root" 1>&2
	exit 1
    fi
}


# Define path to restic executable
if [ `uname` == "Darwin" ]; then
	prog=/opt/local/bin/restic
else
	prog=/usr/bin/restic
fi

# Control variables - defaults
verbose="no"
quiet="yes"
dryrun="no"

# Command line options - see below in function help for details.
while getopts vpd flag
do
    case "${flag}" in
	v) verbose="yes";;
	p) quiet="no";;
	d) dryrun="yes";;
    esac
done
# adjust argument index to point to non-option arguments:
# $1 and $2 will point to them
shift $((OPTIND - 1))

# Check for verbose output: default no
if [ "$verbose" == "yes" ]; then
    verbose="--verbose=3"
else
    verbose=
fi

# Check for quiet execution of restic: default yes
if [ "$quiet" != "no" ]; then
    quiet=--quiet
else
    quiet=
fi

# Check for dry-run
if [ "$dryrun" == "yes" ]; then
    dryrun=--dry-run
else
    dryrun=
fi

export RESTIC_PASSWORD_FILE=~/.resticpw

help()
{
    echo "Check repository consistency."
    echo 
    echo "usage: restic-check OPTIONS LOCATION"
    echo "OPTIONS:"
    echo "  OPTIONS:"
    echo "  -p	Show progress."
    echo "  -v	Be verbose."
    echo "  -d	Dry-run."
    
    echo "LOCATION:"
    echo "  lan       Check repo on local SFTP server."
    echo "  onedrive  Check repo on ONEDRIVE server."
    echo "  local     Check local repo."
    echo "  help      Print this help."
}

log()
{
    echo `date`": $1" >> $logfile
}

# Calculate repository
case "$1" in
    "lan")
	export RESTIC_REPOSITORY="sftp:"`whoami`"@raspberrypi2:/var/Backup/hebbie"
	;;
    "onedrive")
	export RESTIC_REPOSITORY="rclone:onedrive:backup/hebbie"
	;;
    "local")
	export RESTIC_REPOSITORY="/Volumes/BackupDisk/hebbie"
	;;
    "help")
	help
	exit 0
	;;
    *)
	help
	exit 1
	;;
esac      

# Do the job
checkroot

log "$0: check (restic) of $RESTIC_REPOSITORY started."

log "   Checking $RESTIC_REPOSITORY ..."

$prog unlock
{ err="$( { $prog check $quiet $verbose $dryrun; } 2>&1 1>&3 3<&- )"; } 3>&1
if [ $? -ne 0 ]; then
    echo $err
    log "   $err"
    log "$0: check (restic) of $RESTIC_REPOSITORY failed."
    exit 1
fi

log "$0: check (restic) of $RESTIC_REPOSITORY finished."

exit 0
